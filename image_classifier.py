# -*- coding: utf-8 -*-
"""Image Classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XkW7Xd-O06FFACsLm8tV0ZMJtn9zQTEV
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.datasets import mnist
import matplotlib.pyplot as plt

(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Reshape data to include a channel (grayscale images)

x_train = x_train.reshape((x_train.shape[0], 28, 28, 1))
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1))

x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize the data to [0, 1]

model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3), activation='relu'),

    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])


Train_model = model.fit(x_train, y_train, epochs=5, validation_data=(x_test, y_test))

#Evaluate the model

test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"Test accuracy: {test_acc}")

#Plot the training accuracy and loss

plt.plot(Train_model.history['accuracy'], label='accuracy')
plt.plot(Train_model.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0, 1])
plt.legend(loc='lower right')
plt.show()

#Make predictions on the test dataset

predictions = model.predict(x_test)

#Display the first image in the test set and its predicted label

plt.imshow(x_test[4].reshape(28, 28), cmap=plt.cm.binary)
plt.title(f"Predicted: {predictions[4].argmax()}")
plt.show()

